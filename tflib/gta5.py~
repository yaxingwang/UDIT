
from os import listdir
import numpy as np
import scipy.misc
import time
import copy
import pdb
from visualization import vis_gt 
from PIL import Image
Label={'bedroom':0,
       'kitchen':1,
       'dining_room':2,
       'conference_room':3,
       'living_room':4,
       'bridge':5,
       'tower':6,
       'classroom':7,
       'church_outdoor':8,
       'restaurant':9}
def transform_label(label_orig, sz):
    """
    Function to transform the predictions obtained to original size of cityscapes labels
    """
    label = copy.deepcopy(label_orig)
    label = Image.fromarray(label.squeeze().astype(np.uint8))
    label = label.resize( (sz[0],sz[1]),Image.NEAREST)
    label = np.array(label, dtype=np.int32)
    return label

def make_generator(path, batch_size,image_size, pharse='train'):
    epoch_count = [1]

    def get_epoch():
        images = np.zeros((batch_size, image_size, image_size, 3), dtype='float32')
        labels = np.zeros((batch_size, image_size, image_size), dtype='int32')
        depths = np.zeros((batch_size, image_size, image_size, 1), dtype='float32')
        files = range(5000)
        random_state = np.random.RandomState(epoch_count[0])
        random_state.shuffle(files)
        epoch_count[0] += 1
        for n, i in enumerate(files):
            image = scipy.misc.imread("%s%d.jpg"%(path + '/image/', i + 1))
	    image = scipy.misc.imresize(image,(image_size,image_size))

            pdb.set_trace()
            label = np.array(Image.open("%s%d.png"%(path + '/label/', i + 1)))
            label = transform_label(label, (image_size, image_size)) 
            label[label == 0] = 255

            depth = np.array(Image.open("%s%d.png"%(path + '/depth/', i + 1))).astype('float32')
	    depth = scipy.misc.imresize(depth,(image_size, image_size))
            depth = np.expand_dims(np.asarray(depth), axis = 2)

	    #label = scipy.misc.imresize(label,(image_size/2,image_size), interp = 'nearest')
            images[n % batch_size] = (image / 127.5 - 1.).copy()
            labels[n % batch_size] = label.copy()
            depths[n % batch_size] = depth.copy() 
            if n > 0 and n % batch_size == 0:
                yield (images,labels,depths)
    return get_epoch

def load(batch_size, data_dir='/home/yaxing/data/GTA',image_size = 1024):
    return make_generator(data_dir, batch_size, image_size, pharse='train')
    

if __name__ == '__main__':
    pdb.set_trace()
    
    train_gen = load(2, data_dir='/home/yaxing/data/SUN_RGBD/set1',image_size = 256)
    t0 = time.time()
    for i, batch in enumerate(train_gen(), start=1):
        _image = batch[0][1]
        _label = batch[1][1]
        vis_gt(_image, _label, _image, _label, './')
        print "{}\t{}".format(str(time.time() - t0), batch[0][0,0,0,0])
        if i == 1000:
            break
        t0 = time.time()
